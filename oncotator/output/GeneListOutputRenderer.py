from collections import OrderedDict
from oncotator.output.OutputRenderer import OutputRenderer


class GeneListOutputRenderer(OutputRenderer):
    """
     Render segments to a list of genes with the segment annotations attached to each gene.

     For example:
     input annotated segments:

     chr    start   end genes   annotation1 annotation2
     1  100 10000000    FAKE1,FAKE2 3   foo
     3  120 12000000    DUMMY1  5   bar

     output gene list generated by this class:

     gene   annotation1 annotation2
     FAKE1  3   foo
     FAKE2  3   foo
     DUMMY1 5   bar

    More realistic example output:
        gene segment_contig segment_start  segment_end  segment_mean    segment_call

    A gene can be listed multiple times if broken up by two separate segments.

    IMPORTANT: This class only supports the rendering of segments.

    This class uses more RAM than most of the other OutputRenderers and RAM usage will scale up with the number of genes.


    """
    def __init__(self, filename, configFile="", other_options=None):
        self._filename = filename


    def renderMutations(self, segments, metadata=None, comments=None):
        """Render segments into a gene list as described in the docs for this class.

        :param segments: iterable of MutationData
        :param metadata:
        :param comments:
        """

        if metadata is None:
            metadata = OrderedDict()

        if comments is None:
            comments = []

        fp = file(self._filename, 'w')
        for c in comments:
            fp.write("## " + c + "\n")

        # TODO: Define constant for "genes", exon
        all_genes_seen_dict = []
        annotations_per_gene = []
        for seg in segments:



            gene_list = seg['genes'].split(",")
            for g in gene_list:
                all_genes_seen_dict[g] = {}

